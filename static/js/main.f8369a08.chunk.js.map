{"version":3,"sources":["geometry/index.ts","actions/index.ts","model/index.ts","components/Wall.tsx","geometry/Point.ts","model/CollisionDetector.ts","index.tsx","components/App.tsx","components/Maze.tsx","geometry/Rectangle.ts","geometry/PathGenerator.ts","geometry/WallAggregator.ts","geometry/Direction.ts","model/mazeSchemaParser.ts","model/mazeSchema.ts","components/index.ts","components/Dots.tsx","components/Pellets.tsx","components/Pacman.tsx","components/Ghost.tsx","components/ModalText.tsx","components/Hud.tsx","registerServiceWorker.ts","reducers/index.ts","reducers/Pacman.ts","domain/pacmanAnimator.ts","reducers/Ghost.ts","reducers/Mutator.ts","reducers/Game.ts","reducers/Round.ts","reducers/Heat.ts","model/cache.ts","model/MazeNavigator.ts","sagas/index.ts","sagas/startRoundSaga.ts"],"names":["__export","__webpack_require__","exports","START_ROUND_ACTION","RELEASE_PACMAN_ACTION","RELEASE_GHOST_ACTION","BRING_GHOST_OUT_ACTION","ANIMATION_STEP_ACTION","CHANGE_DIRECTION_ACTION","PAUSE_COMMAND_ACTION","START_APPLICATION_ACTION","MODAL_TEXT_ACTION","DOT_EATEN_ACTION","PELLET_EATEN_ACTION","GHOST_BITTEN_ACTION","GHOST_LEFT_BOX_ACTION","HEAT_END_ACTION","FREEZE_ACTORS_ACTION","HIDE_ACTORS_ACTION","KILL_PACMAN_ACTION","RESET_HEAT_ACTION","RESET_ROUND_ACTION","SHOW_LEVEL_ACTION","INCREASE_LEVEL_ACTION","BOUNCE_GHOST_ACTION","START_BLUE_MODE_ACTION","END_BLUE_MODE_ACTION","BLUE_MODE_TIMEOVER_ACTION","animatedStepAction","timestamp","period","type","changeDirectionAction","direction","pauseCommandAction","startApplicationAction","releasePacmanAction","releaseGhostAction","index","bringGhostOutAction","bounceGhostAction","modalTextAction","text","dotEatenAction","pelletEatenAction","ghostBittenAction","pacmanPos","ghostIndex","pacmanPosition","ghostLeftBoxAction","heatEndAction","lost","freezeActorsAction","hideActorsAction","killPacmanAction","resetHeatAction","resetRoundAction","showLevelAction","increaseLevelAction","startBlueModeAction","endBlueModeAction","blueModeTimeOverAction","mazeSchemaParser_1","geometry_1","mazeSchema_1","Store","GhostState","WallType","defaultApp","schema","parseMazeSchema","mazeSchema1","game","maze","cellSize","Point","passes","walls","gridSize","textPos","textCenter","gate","paused","score","lives","level","modalText","undefined","round","dots","sort","YXComparator","map","p","position","collected","pellets","heat","pacman","chomping","running","dying","hidden","mouthAngle","Direction","Left","nextDirection","None","pacmanInitPos","speed","ghosts","i","state","frozen","ghostInitPos","react_1","React","react_konva_1","model_1","default","Component","[object Object]","x0","y0","x1","y1","x2","y2","moveTowardsFractional","movingPoint","targetPoint","fraction","offset","negate","scale","p0","p1","p2","curveStart","curveEnd","startControl","endControl","x","y","bounds","this","props","x3","dx","y3","dy","yc","center","xc","n","line","w","nw","curve","ne","sw","se","x1w","x2w","x1e","x2e","y1n","y2n","y1s","y2s","W","E","N","S","NW","NW2","NE","NE2","SW","SW2","SE","SE2","Ne","Nw","Ws","Wn","Es","En","createElement","Path","data","generatePath","stroke","strokeWidth","_1","points","edgePoints","reduce","Rectangle","by","to","Math","abs","sqrt","size","sign","towards","Right","Up","Down","exponent","expoRound","value","createCollisionDetector","CollisionDetector","binarySearch","xs","cmp","bot","top","length","mid","floor","c","ghostPos","euclidDistanceTo","loot","equals","foundAt","ReactDOM","App_1","registerServiceWorker_1","redux","reducers_1","redux_saga_1","sagas_1","react_redux_1","sagaMiddle","devtools","window","f","sagaEnhancer","applyMiddleware","asyncDispatchEnhancer","api","next","action","syncActivityFinished","actionQueue","flushQueue","forEach","a","store","dispatch","actionWithAsyncDispatch","Object","assign","asyncDispatch","actions","concat","result","enhancers","compose","createStore","rootReducer","run","rootSaga","render","Provider","App","document","getElementById","Maze_1","Hud_1","actions_1","connect","ownProps","animatedStep","changeDirection","pause","start","super","stopTicker","tickerStarted","startTicker","priorTimestamp","performance","now","ticker","requestAnimationFrame","addEventListener","e","keydown","keyup","removeEventListener","addKeyboardListeners","removeKeyboardListeners","event","key","className","Maze","Hud","Wall_1","Pacman_1","Ghost_1","ModalText_1","load","asRectangleSize","toRectangle","Stage","width","height","Layer","Dots","Pellets","Ghost","Pacman","ModalText","Point_1","delta","PathGenerator","gridOffset","sparseHash","pixels","Map","startPoint","minHash","hash","set","point","hasPixelOnTheRight","dir","get","vector","outline","push","rotateDirection","acc","arr","renderPoint","radius","close","WallAggregator","cells","remaining","extractAdjacent","seed","lastDistance","distance","manhattanDistanceTo","splice","appendAdjacentRecursively","wall","neighbours","neighbour","shift","revertDirection","clockwise","allDirections","Noscore","GhostSpawn","Dot","Gate","Fruit","Ghost1","Ghost2","Ghost3","Ghost4","Textbox","rows","wallSymbols","Array","row","gridPos","ghostOnly","isPassable","indexOf","DotView","nextProps","nextState","visible","Circle","fill","DotsView","Group","b","countVisible","l","disp","absPos","rotation","calcRotation","Arc","angle","innerRadius","outerRadius","scared","eyeOffset","leftEye","rightEye","scaleX","scaleY","color","mazeSize","Text","fontSize","fontStyle","fontFamily","padding","align","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","unregister","ready","Game_1","Round_1","Heat_1","cache_1","mazeNavigator","getMazeNavigator","events","pacmanReducer","ghostReducer","heatReducer","roundReducer","gameReducer","pacmanAnimator_1","CollisionDetector_1","mazePath","PacmanAnimator","step","collisionDetector","dotLooted","checkLoot","pelletLooted","exactPos","hasNeighbour","iassign","chomp","move","die","ms","chompMillis","s","newPos","canEnter","Mutator_1","GhostMutator","Mutator","mutable","bouncing","leavingBox","allowedDirections","pacmanDirection","blinkyPosition","decision","blinkyDecision","inkyDecision","pinkyDecision","max","random","distances","filter","d","closestIndex","blinkyVector","states","biteEventPosted","ghost","possibleDirections","coerceDirection","decideChasingDirection","canGhostBounceUp","isGhostOutOfTheBox","exitDirection","directionTowardsGate","decideRunawayDirection","advance","checkBite","startMoving","startLeaveBox","startBouncing","freeze","hide","startBlueMode","endBlueMode","m","readOnly","_readOnly","_mutable","r","checkRoundComplete","every","reselect_1","MazeNavigator_1","createSelector","createMazeNavigator","Cell","ghostsOnly","model","MazeNavigator","cell","setNeighbour","hashDelta","hashFactor","xOrY","coordinateToCell","cellX","effects_1","startRoundSaga_1","takeEvery","startApplicationSaga","startGameSaga","roundOutcome","call","startRoundSaga","put","delay","heatOutcome","startHeatSaga","releaseGhostSaga","msdelay","bounceGhostSaga","msDelay","take","blueModeSaga","msDuration","ghost1","fork","ghost2","ghost3","ghost4","blueMode","heatComplete","payload","cancel"],"mappings":"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","file":"static/js/main.f8369a08.chunk.js","sourcesContent":["export * from './Point';\r\nexport * from './Rectangle';\r\nexport * from './PathGenerator';\r\nexport * from './WallAggregator';\r\nexport * from './Direction';","import { Direction, Point } from '../geometry';\r\n\r\nexport const START_ROUND_ACTION = 'START_ROUND';\r\nexport const RELEASE_PACMAN_ACTION = 'ReleasePacman';\r\nexport const RELEASE_GHOST_ACTION = 'ReleaseGhost';\r\nexport const BRING_GHOST_OUT_ACTION = 'BringHostOut';\r\nexport const ANIMATION_STEP_ACTION = 'ANIMATION_STEP';\r\nexport const CHANGE_DIRECTION_ACTION = 'CHANGE_DIR';\r\nexport const PAUSE_COMMAND_ACTION = 'PAUSE';\r\nexport const START_APPLICATION_ACTION = 'StartApp';\r\nexport const MODAL_TEXT_ACTION = 'ModalText';\r\nexport const DOT_EATEN_ACTION = 'DotEaten';\r\nexport const PELLET_EATEN_ACTION = 'PelletEaten';\r\nexport const GHOST_BITTEN_ACTION = 'GhostBitten';\r\nexport const GHOST_LEFT_BOX_ACTION = 'GhostLeftBox';\r\nexport const HEAT_END_ACTION = 'HeatEnd';\r\nexport const FREEZE_ACTORS_ACTION = 'FreezeActors';\r\nexport const HIDE_ACTORS_ACTION = 'HideActors';\r\nexport const KILL_PACMAN_ACTION = 'KillPacman';\r\nexport const RESET_HEAT_ACTION = 'ResetHeat';\r\nexport const RESET_ROUND_ACTION = 'ResetRound';\r\nexport const SHOW_LEVEL_ACTION = 'ShowLevel';\r\nexport const INCREASE_LEVEL_ACTION = 'IncreaseLevel';\r\nexport const BOUNCE_GHOST_ACTION = 'BounceGhost';\r\nexport const START_BLUE_MODE_ACTION = 'StartBlueMode';\r\nexport const END_BLUE_MODE_ACTION = 'EndBlueMode';\r\nexport const BLUE_MODE_TIMEOVER_ACTION = 'BlueModeTimeOver';\r\n\r\nexport type StartRoundAction = {\r\n  type: typeof START_ROUND_ACTION;\r\n};\r\n\r\nexport type AnimatedStepAction = {\r\n  type: typeof ANIMATION_STEP_ACTION;\r\n  timestamp: number;\r\n  /**\r\n   * Milliseconds elapsed since previous animation tick\r\n   */\r\n  period: number;\r\n};\r\n\r\nexport type ChangeDirectionAction = {\r\n  type: typeof CHANGE_DIRECTION_ACTION;\r\n  direction: Direction;\r\n};\r\n\r\nexport type PauseCommandAction = {\r\n  type: typeof PAUSE_COMMAND_ACTION;\r\n};\r\n\r\nexport type StartApplicationAction = {\r\n  type: typeof START_APPLICATION_ACTION;\r\n};\r\n\r\nexport type ModalTextAction = {\r\n  type: typeof MODAL_TEXT_ACTION;\r\n  text?: string;\r\n};\r\n\r\nexport type ReleasePacmanAction = {\r\n  type: typeof RELEASE_PACMAN_ACTION;\r\n};\r\n\r\nexport type ReleaseGhostAction = {\r\n  type: typeof RELEASE_GHOST_ACTION;\r\n  index: number;\r\n};\r\n\r\nexport type BringGhostOutAction = {\r\n  type: typeof BRING_GHOST_OUT_ACTION;\r\n  index: number;\r\n};\r\n\r\nexport type BounceGhostAction = {\r\n  type: typeof BOUNCE_GHOST_ACTION;\r\n  index: number;\r\n};\r\n\r\nexport type DotEatenAction = {\r\n  type: typeof DOT_EATEN_ACTION;\r\n  index: number;\r\n};\r\n\r\nexport type PelletEatenAction = {\r\n  type: typeof PELLET_EATEN_ACTION;\r\n  index: number;\r\n};\r\n\r\nexport type GhostBittenAction = {\r\n  type: typeof GHOST_BITTEN_ACTION;\r\n  pacmanPosition: Point;\r\n  ghostIndex: number;\r\n};\r\n\r\nexport type GhostLeftBoxAction = {\r\n  type: typeof GHOST_LEFT_BOX_ACTION;\r\n  ghostIndex: number;\r\n};\r\n\r\nexport type HeatEndAction = {\r\n  type: typeof HEAT_END_ACTION;\r\n  lost: boolean;\r\n};\r\n\r\nexport type FreezeActorsAction = {\r\n  type: typeof FREEZE_ACTORS_ACTION;\r\n};\r\n\r\nexport type HideActorsAction = {\r\n  type: typeof HIDE_ACTORS_ACTION;\r\n};\r\n\r\nexport type KillPacmanAction = {\r\n  type: typeof KILL_PACMAN_ACTION;\r\n};\r\n\r\nexport type ResetHeatAction = {\r\n  type: typeof RESET_HEAT_ACTION;\r\n};\r\n\r\nexport type ResetRoundAction = {\r\n  type: typeof RESET_ROUND_ACTION;\r\n};\r\n\r\nexport type ShowLevelAction = {\r\n  type: typeof SHOW_LEVEL_ACTION;\r\n};\r\n\r\nexport type IncreaseLevelAction = {\r\n  type: typeof INCREASE_LEVEL_ACTION;\r\n};\r\n\r\nexport type StartBlueModeAction = {\r\n  type: typeof START_BLUE_MODE_ACTION;\r\n};\r\n\r\nexport type EndBlueModeAction = {\r\n  type: typeof END_BLUE_MODE_ACTION;\r\n};\r\n\r\nexport type BlueModeTimeOverAction = {\r\n  type: typeof BLUE_MODE_TIMEOVER_ACTION;\r\n};\r\n\r\nexport function animatedStepAction(timestamp: number, period: number): AnimatedStepAction {\r\n  return {\r\n    type: ANIMATION_STEP_ACTION,\r\n    timestamp: timestamp,\r\n    period: period,\r\n  };\r\n}\r\n\r\nexport function changeDirectionAction(direction: Direction): ChangeDirectionAction {\r\n  return {\r\n    type: CHANGE_DIRECTION_ACTION,\r\n    direction\r\n  };\r\n}\r\n\r\nexport function pauseCommandAction(): PauseCommandAction {\r\n  return {\r\n    type: PAUSE_COMMAND_ACTION,\r\n  };\r\n}\r\n\r\nexport function startApplicationAction(): StartApplicationAction {\r\n  return {\r\n    type: START_APPLICATION_ACTION,\r\n  };\r\n}\r\n\r\nexport function releasePacmanAction(): ReleasePacmanAction {\r\n  return {\r\n    type: RELEASE_PACMAN_ACTION\r\n  };\r\n}\r\n\r\nexport function releaseGhostAction(index: number): ReleaseGhostAction {\r\n  return {\r\n    type: RELEASE_GHOST_ACTION,\r\n    index: index\r\n  };\r\n}\r\n\r\nexport function bringGhostOutAction(index: number): BringGhostOutAction {\r\n  return {\r\n    type: BRING_GHOST_OUT_ACTION,\r\n    index: index\r\n  };\r\n}\r\n\r\nexport function bounceGhostAction(index: number): BounceGhostAction {\r\n  return {\r\n    type: BOUNCE_GHOST_ACTION,\r\n    index: index\r\n  };\r\n}\r\n\r\nexport function modalTextAction(text?: string): ModalTextAction {\r\n  return {\r\n    type: MODAL_TEXT_ACTION,\r\n    text: text\r\n  };\r\n}\r\n  \r\nexport function dotEatenAction(index: number): DotEatenAction {\r\n    return {\r\n        type: DOT_EATEN_ACTION,\r\n        index: index\r\n    };\r\n}\r\n\r\nexport function pelletEatenAction(index: number): PelletEatenAction {\r\n    return {\r\n        type: PELLET_EATEN_ACTION,\r\n        index: index\r\n    };\r\n}\r\n\r\nexport function ghostBittenAction(pacmanPos: Point, ghostIndex: number): GhostBittenAction {\r\n    return {\r\n        type: GHOST_BITTEN_ACTION,\r\n        pacmanPosition: pacmanPos,\r\n        ghostIndex: ghostIndex\r\n    };\r\n}\r\n\r\nexport function ghostLeftBoxAction(ghostIndex: number): GhostLeftBoxAction {\r\n    return {\r\n        type: GHOST_LEFT_BOX_ACTION,\r\n        ghostIndex: ghostIndex\r\n    };\r\n}\r\n\r\nexport function heatEndAction(lost: boolean): HeatEndAction {\r\n    return {\r\n        type: HEAT_END_ACTION,\r\n        lost: lost\r\n    };\r\n}\r\n\r\nexport function freezeActorsAction(): FreezeActorsAction {\r\n    return {\r\n        type: FREEZE_ACTORS_ACTION,\r\n    };\r\n}\r\n\r\nexport function hideActorsAction(): HideActorsAction {\r\n    return {\r\n        type: HIDE_ACTORS_ACTION,\r\n    };\r\n}\r\n\r\nexport function killPacmanAction(): KillPacmanAction {\r\n    return {\r\n        type: KILL_PACMAN_ACTION,\r\n    };\r\n}\r\n\r\nexport function resetHeatAction(): ResetHeatAction {\r\n    return {\r\n        type: RESET_HEAT_ACTION,\r\n    };\r\n}\r\n\r\nexport function resetRoundAction(): ResetRoundAction {\r\n    return {\r\n        type: RESET_ROUND_ACTION,\r\n    };\r\n}\r\n\r\nexport function showLevelAction(): ShowLevelAction {\r\n    return {\r\n        type: SHOW_LEVEL_ACTION,\r\n    };\r\n}\r\n\r\nexport function increaseLevelAction(): IncreaseLevelAction {\r\n    return {\r\n        type: INCREASE_LEVEL_ACTION,\r\n    };\r\n}\r\n\r\nexport function startBlueModeAction(): StartBlueModeAction {\r\n    return {\r\n        type: START_BLUE_MODE_ACTION,\r\n    };\r\n}\r\n\r\nexport function endBlueModeAction(): EndBlueModeAction {\r\n    return {\r\n        type: END_BLUE_MODE_ACTION,\r\n    };\r\n}\r\n\r\nexport function blueModeTimeOverAction(): BlueModeTimeOverAction {\r\n    return {\r\n        type: BLUE_MODE_TIMEOVER_ACTION,\r\n    };\r\n}\r\n\r\nexport type Action = StartRoundAction |\r\n                     AnimatedStepAction |\r\n                     ChangeDirectionAction |\r\n                     PauseCommandAction |\r\n                     StartApplicationAction |\r\n                     ReleasePacmanAction |\r\n                     ReleaseGhostAction |\r\n                     BounceGhostAction |\r\n                     BringGhostOutAction |\r\n                     ModalTextAction |\r\n                     DotEatenAction | \r\n                     PelletEatenAction |\r\n                     GhostBittenAction |\r\n                     GhostLeftBoxAction |\r\n                     FreezeActorsAction |\r\n                     HideActorsAction |\r\n                     KillPacmanAction |\r\n                     HeatEndAction |\r\n                     ResetHeatAction |\r\n                     ResetRoundAction |\r\n                     ShowLevelAction | \r\n                     IncreaseLevelAction |\r\n                     StartBlueModeAction |\r\n                     EndBlueModeAction |\r\n                     BlueModeTimeOverAction;\r\n\r\nexport interface HasInducedActions {\r\n  asyncDispatch(actions: Action[]): void;\r\n}","import { parseMazeSchema } from './mazeSchemaParser';\r\nimport { Direction, Point } from '../geometry';\r\nimport { mazeSchema1 } from './mazeSchema';\r\n\r\nexport namespace Store {\r\n\r\n  export type Pacman = {\r\n    chomping: boolean,\r\n    running: boolean,\r\n    dying: boolean,\r\n    hidden: boolean,\r\n    mouthAngle: number,\r\n    direction: Direction,\r\n    nextDirection: Direction,\r\n    speed: number,\r\n    position: Point\r\n  };\r\n\r\n  export enum GhostState {\r\n    running = 'running',\r\n    bouncing = 'bouncing',\r\n    hidden = 'hidden',\r\n    frozen = 'frozen',\r\n    leavingBox = 'spawning',\r\n    scared = 'scared'\r\n  }\r\n\r\n  export interface Ghost {\r\n    state: GhostState;\r\n    direction: Direction,\r\n    speed: number,\r\n    position: Point;\r\n  };\r\n\r\n  export enum WallType {\r\n    n,\r\n    nw,\r\n    w,\r\n    ne,\r\n    sw,\r\n    se,\r\n    N,\r\n    S,\r\n    NW,\r\n    NW2,\r\n    W,\r\n    E,\r\n    NE,\r\n    NE2,\r\n    SW,\r\n    SW2,\r\n    SE,\r\n    SE2,\r\n    Ne,\r\n    Nw,\r\n    Ws,\r\n    Wn,\r\n    Es,\r\n    En,\r\n  }\r\n\r\n  export type Wall = {\r\n    position: Point;\r\n    type: WallType;\r\n  };\r\n\r\n  export type Pass = {\r\n    gridPos: Point;\r\n    ghostOnly: boolean;\r\n  };\r\n\r\n  export type Maze = {\r\n    cellSize: Point;\r\n    passes: Pass[];\r\n    walls: Wall[];\r\n    gridSize: Point;\r\n    textPos: Point;\r\n    gate: Point;\r\n  };\r\n\r\n  export type Game = {\r\n    maze: Maze;\r\n    score: number;\r\n    lives: number;\r\n    level: number;\r\n    modalText?: string;\r\n    paused: boolean;\r\n  }\r\n\r\n  export type Loot = {\r\n    position: Point;\r\n    collected: boolean;\r\n  }\r\n\r\n  export type Round = {\r\n    dots: Loot[];\r\n    pellets: Loot[];\r\n  }\r\n\r\n  export interface Heat {\r\n    pacman: Pacman;\r\n    ghosts: Ghost[];\r\n  }\r\n\r\n  export type App = {\r\n    game: Game,\r\n    round: Round,\r\n    heat: Heat\r\n  };\r\n\r\n  export function defaultApp(): Store.App {\r\n    const schema = parseMazeSchema(mazeSchema1);\r\n    const cellSize = new Point(28, 28);\r\n\r\n    const maze: Maze = {\r\n      cellSize: cellSize,\r\n      passes: schema.passes,\r\n      walls: schema.walls,\r\n      gridSize: schema.gridSize,\r\n      textPos: schema.textCenter,\r\n      gate: schema.gate\r\n    };\r\n\r\n    const game: Game = {\r\n      maze: maze,\r\n      paused: false,\r\n      score: 0,\r\n      lives: 3,\r\n      level: 1,\r\n      modalText: undefined\r\n    }\r\n\r\n    const dots = schema.dots.sort(Point.YXComparator)\r\n      .map(p => ({ position: p, collected: false }));\r\n    const pellets = schema.pellets.sort(Point.YXComparator)\r\n      .map(p => ({ position: p, collected: false }));\r\n\r\n    \r\n    const round: Round = {\r\n      dots: dots,\r\n      pellets: pellets  \r\n    }\r\n\r\n    const pacman: Pacman = {\r\n      chomping: false,\r\n      running: false,\r\n      dying: false,\r\n      hidden: false,\r\n      mouthAngle: 90,\r\n      direction: Direction.Left,\r\n      nextDirection: Direction.None,\r\n      position: schema.pacmanInitPos,\r\n      speed: 8 // cells per second\r\n    };\r\n\r\n    const ghosts = [0, 1, 2, 3].map(i => {\r\n      return {\r\n        state: GhostState.frozen,\r\n        running: false,\r\n        hidden: false,\r\n        direction: Direction.None,\r\n        speed: 8, // cells per second\r\n        position: schema.ghostInitPos[i]\r\n      }\r\n    });\r\n\r\n    const heat: Heat = {\r\n      pacman: pacman,\r\n      ghosts: ghosts,\r\n    }\r\n\r\n    return {\r\n      game: game,\r\n      round: round,\r\n      heat: heat\r\n    }\r\n  }\r\n}","import { Component } from 'react';\r\nimport * as React from 'react';\r\nimport { Rectangle, Point } from '../geometry';\r\nimport { Path } from 'react-konva';\r\nimport { Store } from '../model';\r\n\r\nexport type WallProps = {\r\n  key: number;\r\n  bounds: Rectangle;\r\n  type: Store.WallType;\r\n};\r\n\r\nexport default class Wall extends Component<WallProps, {}> {\r\n\r\n//    private getRandomColor() : string {\r\n//        const letters = '0123456789ABCDEF';\r\n//        let color = '#';\r\n//        for (let i = 0; i < 6; i++) {\r\n//            color += letters[Math.floor(Math.random() * 16)];\r\n//        }\r\n//        return color;\r\n//    }\r\n\r\n  line(x0: number, y0: number, x1: number, y1: number): string {\r\n    return `M ${x0} ${y0} L${x1} ${y1}`;\r\n  }\r\n\r\n  curve(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): string {\r\n    function moveTowardsFractional(movingPoint: Point, targetPoint: Point, fraction: number): Point {\r\n      return movingPoint.offset(targetPoint.offset(movingPoint.negate).scale(fraction));\r\n    }\r\n    // The start and end of the curve are just our point moved towards the previous and neyt points, respectivly\r\n    const p0 = new Point(x0, y0);\r\n    const p1 = new Point(x1, y1);\r\n    const p2 = new Point(x2, y2);\r\n\r\n    let curveStart = moveTowardsFractional(p1, p0, .9);\r\n    let curveEnd = moveTowardsFractional(p1, p2, .9);\r\n\r\n    // The curve control points are halfway between the start/end of the curve and the original point\r\n    var startControl = moveTowardsFractional(curveStart, p1, .5);\r\n    var endControl = moveTowardsFractional(p1, curveEnd, .5);\r\n\r\n    return `M${p0.x} ${p0.y} L${curveStart.x} ${curveStart.y} C${startControl.x} ${startControl.y} ${endControl.x} ${endControl.y} ${curveEnd.x} ${curveEnd.y} L${p2.x} ${p2.y}`;\r\n  }\r\n\r\n  generatePath(): string {\r\n    const bounds = this.props.bounds;\r\n    const x0 = bounds.x;\r\n    const y0 = bounds.y;\r\n    const x3 = x0 + bounds.dx;\r\n    const y3 = y0 + bounds.dy;\r\n\r\n    const yc = bounds.center.y;\r\n    const xc = bounds.center.x;\r\n\r\n    switch (this.props.type) {\r\n      case Store.WallType.n:  return this.line(x0, yc, x3, yc);\r\n      case Store.WallType.w:  return this.line(xc, y0, xc, y3);\r\n      case Store.WallType.nw: return this.curve(xc, y3, xc, yc, x3, yc);\r\n      case Store.WallType.ne: return this.curve(x0, yc, xc, yc, xc, y3);\r\n      case Store.WallType.sw: return this.curve(xc, y0, xc, yc, x3, yc);\r\n      case Store.WallType.se: return this.curve(x0, yc, xc, yc, xc, y0);\r\n    }\r\n\r\n    const x1w = x0 + bounds.dx * 0.20;\r\n    const x2w = x0 + bounds.dx * 0.50;\r\n    const x1e = x0 + bounds.dx * 0.50;\r\n    const x2e = x0 + bounds.dx * 0.80;\r\n    const y1n = y0 + bounds.dy * 0.20;\r\n    const y2n = y0 + bounds.dy * 0.50;\r\n    const y1s = y0 + bounds.dy * 0.50;\r\n    const y2s = y0 + bounds.dy * 0.80;\r\n\r\n    switch (this.props.type) {\r\n      case Store.WallType.W:\r\n        return this.line(x1w, y0, x1w, y3) + this.line(x2w, y0, x2w, y3);\r\n      case Store.WallType.E:\r\n        return this.line(x1e, y0, x1e, y3) + this.line(x2e, y0, x2e, y3);\r\n      case Store.WallType.N:\r\n        return this.line(x0, y1n, x3, y1n) + this.line(x0, y2n, x3, y2n);\r\n      case Store.WallType.S:\r\n        return this.line(x0, y1s, x3, y1s) + this.line(x0, y2s, x3, y2s);\r\n      case Store.WallType.NW:\r\n        return this.curve(x1w, y3, x1w, y1n, x3, y1n) + this.curve(x2w, y3, x2w, y2n, x3, y2n);\r\n      case Store.WallType.NW2:\r\n        return this.curve(x1e, y3, x1e, y1s, x3, y1s) + this.curve(x2e, y3, x2e, y2s, x3, y2s);\r\n      case Store.WallType.NE:\r\n        return this.curve(x0, y1n, x2e, y1n, x2e, y3) + this.curve(x0, y2n, x1e, y2n, x1e, y3);\r\n      case Store.WallType.NE2:\r\n        return this.curve(x0, y1s, x2w, y1s, x2w, y3) + this.curve(x0, y2s, x1w, y2s, x1w, y3);\r\n      case Store.WallType.SW:\r\n        return this.curve(x1w, y0, x1w, y2s, x3, y2s) + this.curve(x2w, y0, x2w, y1s, x3, y1s);\r\n      case Store.WallType.SW2:\r\n        return this.curve(x1e, y0, x1e, y2n, x3, y2n) + this.curve(x2e, y0, x2e, y1n, x3, y1n);\r\n      case Store.WallType.SE:\r\n        return this.curve(x0, y1s, x1e, y1s, x1e, y0) + this.curve(x0, y2s, x2e, y2s, x2e, y0);\r\n      case Store.WallType.SE2:\r\n        return this.curve(x0, y1n, x1w, y1n, x1w, y0) + this.curve(x0, y2n, x2w, y2n, x2w, y0);\r\n      case Store.WallType.Ne:\r\n        return this.line(x0, y1n, x3, y1n) + this.curve(x0, y2n, xc, y2n, xc, y3);\r\n      case Store.WallType.Nw:\r\n        return this.line(x3, y1n, x0, y1n) + this.curve(x3, y2n, xc, y2n, xc, y3);\r\n      case Store.WallType.Ws:\r\n        return this.line(x1w, y0, x1w, y3) + this.curve(x2w, y0, x2w, yc, x3, yc);\r\n      case Store.WallType.Wn:\r\n        return this.line(x1w, y3, x1w, y0) + this.curve(x2w, y3, x2w, yc, x3, yc);\r\n      case Store.WallType.Es:\r\n        return this.line(x2e, y0, x2e, y3) + this.curve(x1e, y0, x1e, yc, x0, yc);\r\n      case Store.WallType.En:\r\n        return this.line(x2e, y3, x2e, y0) + this.curve(x1e, y3, x1e, yc, x0, yc);\r\n\r\n      default:\r\n        return '';\r\n    }  \r\n  }\r\n  render() {\r\n        return (\r\n          <Path \r\n            data={this.generatePath()}\r\n            stroke=\"blue\"\r\n            strokeWidth={3} \r\n          />\r\n     );\r\n    }\r\n}","import { Rectangle, Direction } from '.';\r\n\r\nexport class Point {\r\n  public static boundingRect(points: Point[]) {\r\n    const bigNumber = 100000;\r\n    const edgePoints = points.reduce((bounds, p) => {\r\n        if (bounds.x0 > p.x)\r\n          bounds.x0 = p.x;\r\n        if (bounds.y0 > p.y)\r\n          bounds.y0 = p.y;\r\n        if (bounds.x1 < p.x)\r\n          bounds.x1 = p.x;\r\n        if (bounds.y1 < p.y)\r\n          bounds.y1 = p.y;\r\n        return bounds;\r\n      },\r\n      { x0: bigNumber, y0: bigNumber, x1: -bigNumber, y1: -bigNumber });\r\n    return new Rectangle(edgePoints.x0, edgePoints.y0, edgePoints.x1 - edgePoints.x0, edgePoints.y1 - edgePoints.y0);\r\n  }\r\n\r\n  constructor(public x: number, public y: number) {}\r\n\r\n  public offset(by: Point): Point {\r\n    return new Point(this.x + by.x, this.y + by.y);\r\n  }\r\n\r\n  public equals(to: Point): boolean {\r\n    return this.x === to.x && this.y === to.y;\r\n  }\r\n\r\n  public scale(by: Point | number): Point {\r\n    if (typeof (by) === 'number')\r\n      return new Point(this.x * by, this.y * by);\r\n    return new Point(this.x * by.x, this.y * by.y);\r\n  }\r\n\r\n  public manhattanDistanceTo(p: Point): number {\r\n    return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\r\n  }\r\n\r\n  public euclidDistanceTo(p: Point): number {\r\n    var dx = p.x - this.x;\r\n    var dy = p.y - this.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  public asRectangleSize(): Rectangle {\r\n    return new Rectangle(0, 0, this.x, this.y);\r\n  }\r\n\r\n  public toRectangle(size: Point): Rectangle {\r\n    return new Rectangle(this.x, this.y, size.x, size.y);\r\n  }\r\n\r\n  public toVector(): Point {\r\n    return new Point(Math.sign(this.x), Math.sign(this.y));\r\n  }\r\n\r\n  public static vector(towards: Direction): Point {\r\n    switch (towards) {\r\n    case Direction.Right:\r\n      return new Point(1, 0);\r\n    case Direction.Left:\r\n      return new Point(-1, 0);\r\n    case Direction.Up:\r\n      return new Point(0, -1);\r\n    case Direction.Down:\r\n      return new Point(0, 1);\r\n    default:\r\n      return new Point(0, 0);\r\n    }\r\n  }\r\n\r\n  public get negate(): Point {\r\n    return new Point(-this.x, -this.y);\r\n  }\r\n\r\n  public round(exponent: number): Point {\r\n    function expoRound(value: number) {\r\n      return Math.round(value * exponent) / exponent;\r\n    }\r\n    return new Point(expoRound(this.x), expoRound(this.y));\r\n  }\r\n\r\n  public static YXComparator = (p1: Point, p2: Point): number => (p1.y - p2.y) * 1000 + (p1.x - p2.x)\r\n}","import { Point } from '../geometry';\r\nimport { Store } from '.';\r\n\r\nexport interface ICollisionDetector {\r\n  checkLoot(pacmanPos: Point, loot: Store.Loot[]): number | null;\r\n  checkBite(pacmanPos: Point, ghostPos: Point): boolean;\r\n}\r\n\r\nexport const createCollisionDetector = (): ICollisionDetector => new CollisionDetector();\r\n\r\nconst binarySearch = (xs: Store.Loot[], x: Point, cmp: (p: Point, q: Point) => number): number => {\r\n  var bot = 0;\r\n  var top = xs.length;\r\n  while (bot < top) { // If x is in xs, it's somewhere in xs[bot..top).\r\n    var mid = Math.floor((bot + top) / 2);\r\n    var c = cmp(xs[mid].position, x);\r\n    if (c === 0) return mid;\r\n    if (c < 0) bot = mid + 1;\r\n    if (0 < c) top = mid;\r\n  }\r\n  return -1;\r\n}\r\n\r\n\r\nclass CollisionDetector implements ICollisionDetector {\r\n\r\n\r\n  checkBite(pacmanPos: Point, ghostPos: Point): boolean {\r\n    return pacmanPos.euclidDistanceTo(ghostPos) < 1.6;\r\n  }\r\n\r\n\r\n  checkLoot(pacmanPos: Point, loot: Store.Loot[]): number | null {\r\n    const nearCenter = pacmanPos.round(5).equals(pacmanPos.round(1));\r\n    if (nearCenter) {\r\n      const foundAt = binarySearch(loot, pacmanPos.round(1), Point.YXComparator);\r\n      if (foundAt >= 0 && !loot[foundAt].collected)\r\n        return foundAt;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {App} from './components/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\nimport * as redux from 'redux';\r\nimport createProvider from './reducers/Provider';\r\nimport { rootReducer } from './reducers';\r\nimport { Store } from './model';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootSaga } from './sagas';\r\nimport { Action, Dispatch, MiddlewareAPI, Middleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst sagaMiddle = createSagaMiddleware();\r\n\r\nlet devtools: redux.GenericStoreEnhancer = window['devToolsExtension']\r\n  ? window['devToolsExtension']()\r\n  : (f: any) => f;\r\nconst sagaEnhancer = redux.applyMiddleware(sagaMiddle);\r\n\r\nfunction asyncDispatchMiddleware(): redux.Middleware {\r\n  return function<S, D>(api: redux.MiddlewareAPI<S>) {\r\n    return function(next: redux.Dispatch<D>): redux.Dispatch<D> {\r\n      return function<A extends Action>(action: A): A {\r\n        let syncActivityFinished = false;\r\n        let actionQueue: Action[] = [];\r\n\r\n        function flushQueue() {\r\n          actionQueue.forEach(a => store.dispatch(a)); // flush queue\r\n          actionQueue = [];\r\n        }\r\n\r\n        function asyncDispatch(actions: Action[]) {\r\n          actionQueue = actionQueue.concat(actions);\r\n\r\n          if (syncActivityFinished) {\r\n            flushQueue();\r\n          }\r\n        }\r\n\r\n        const actionWithAsyncDispatch =\r\n          Object.assign({}, action, { asyncDispatch });\r\n\r\n        const result = next(actionWithAsyncDispatch);\r\n        syncActivityFinished = true;\r\n        flushQueue();\r\n        return result\r\n      }\r\n    }\r\n  }\r\n};\r\nconst asyncDispatchEnhancer = redux.applyMiddleware(asyncDispatchMiddleware()); \r\n\r\nconst enhancers = redux.compose(asyncDispatchEnhancer, sagaEnhancer, devtools);\r\n\r\nconst store = redux.createStore(rootReducer, Store.defaultApp(), enhancers as redux.GenericStoreEnhancer);\r\nsagaMiddle.run(rootSaga);\r\n\r\nReactDOM.render(<Provider store={store}><App {...Store.defaultApp()} /></Provider>,\r\n  document.getElementById('root') as HTMLElement);\r\nregisterServiceWorker();\r\n","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { Maze } from './Maze';\r\nimport { Hud } from './Hud';\r\nimport { Store } from '../model';\r\nimport { animatedStepAction, changeDirectionAction, pauseCommandAction, startApplicationAction } from '../actions';\r\nimport { Direction } from '../geometry/';\r\n// import * as Perf from 'react-addons-perf';\r\n\r\ntype OwnProps = Store.App;\r\n\r\ntype OwnState = {\r\n};\r\n\r\ntype ConnectedState = {\r\n    paused: boolean;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n  animatedStep: (timestamp: number, priorTimestamp: number) => void;\r\n  changeDirection: (direction: Direction) => void;\r\n  start: () => void;\r\n  pause: () => void;\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n  paused: state.game.paused \r\n});\r\n\r\nfunction mapDispatchToProps(dispatch: redux.Dispatch<Store.App>): ConnectedDispatch {\r\n    return {\r\n        animatedStep: (timestamp: number, period: number) => dispatch(animatedStepAction(timestamp, period)),\r\n        changeDirection: (direction) => dispatch(changeDirectionAction(direction)),\r\n        pause: () => dispatch(pauseCommandAction()),\r\n        start: () => dispatch(startApplicationAction()),\r\n    };\r\n}\r\n\r\nclass AppView extends React.Component<OwnProps & ConnectedDispatch & ConnectedState, OwnState> {\r\n  tickerStarted: boolean;\r\n\r\n  constructor() {\r\n    super();\r\n    // var w: any = window;\r\n    // w.Perf = Perf;\r\n  }\r\n\r\n  addKeyboardListeners(): void {\r\n      window.addEventListener('keydown', (e) => this.keydown(e));\r\n      window.addEventListener('keyup', (e) => this.keyup(e));\r\n  }\r\n\r\n  removeKeyboardListeners(): void {\r\n    window.removeEventListener('keydown', this.keydown);\r\n    window.removeEventListener('keyup', this.keyup);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startTicker();\r\n    this.addKeyboardListeners();\r\n    this.props.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stopTicker();\r\n    this.removeKeyboardListeners();\r\n  }\r\n\r\n  keydown(event: KeyboardEvent): void {\r\n    let key = event.key;\r\n\r\n    switch (key) {\r\n    case 'ArrowRight':\r\n        this.props.changeDirection(Direction.Right);\r\n        break;\r\n    case 'ArrowLeft':\r\n        this.props.changeDirection(Direction.Left);\r\n        break;\r\n    case 'ArrowDown':\r\n        this.props.changeDirection(Direction.Down);\r\n        break;\r\n    case 'ArrowUp':\r\n        this.props.changeDirection(Direction.Up);\r\n        break;\r\n    case ' ':\r\n        this.props.pause();\r\n        break;\r\n    default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  keyup(event: KeyboardEvent) {\r\n    let key = event.key;\r\n\r\n    switch (key) {\r\n    default:\r\n      // no op\r\n    }\r\n  }\r\n\r\n  stopTicker = () => {\r\n    this.tickerStarted = false;\r\n  }\r\n  startTicker = () => {\r\n    this.tickerStarted = true;\r\n\r\n    let priorTimestamp = performance.now();\r\n\r\n    let ticker = (timestamp: number) => {\r\n\r\n      if (this.tickerStarted) {\r\n        if (!this.props.paused) {\r\n          let period = timestamp - priorTimestamp;\r\n          if (period < 0) {\r\n              period = 0;\r\n          }\r\n          if (period > 16) {\r\n              period = 16;\r\n          }\r\n\r\n          this.props.animatedStep(timestamp, period);\r\n        }\r\n        priorTimestamp = timestamp;\r\n        window.requestAnimationFrame(ticker);\r\n      }\r\n    };\r\n\r\n    window.requestAnimationFrame(ticker);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <table>\r\n          <tr>\r\n            <Maze />\r\n          </tr>\r\n          <tr>\r\n            <Hud />\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const App: React.ComponentClass<OwnProps> = connect(mapStateToProps, mapDispatchToProps)(AppView);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as redux from 'redux';\r\nimport { Stage, Layer } from 'react-konva';\r\nimport { WallProps } from '.';\r\nimport Wall from './Wall';\r\nimport { Dots, Pellets } from '.';\r\nimport { Pacman } from './Pacman';\r\nimport { Ghost } from './Ghost';\r\nimport { Store } from '../model';\r\nimport { ModalText } from './ModalText';\r\n\r\ntype ConnectedState = {\r\n  maze: Store.Maze\r\n};\r\n\r\ntype OwnProps = {\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n  load: () => void\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n  maze: state.game.maze\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n  load: () => {/**/}\r\n});\r\n\r\nclass MazeView extends React.Component<ConnectedState & ConnectedDispatch & OwnProps, {}> {\r\n\r\n  render() {\r\n    const maze = this.props.maze;\r\n    const bounds = maze.gridSize.scale(maze.cellSize).asRectangleSize();\r\n    const walls: WallProps[] = maze.walls.map((w, i) => {\r\n      return {\r\n        key: i,\r\n        bounds: w.position.scale(maze.cellSize).toRectangle(maze.cellSize),\r\n        type: w.type\r\n      }; \r\n    });\r\n\r\n    return (\r\n      <Stage width={bounds.dx} height={bounds.dy}>\r\n        <Layer>\r\n          {walls.map(w => <Wall key={w.key} {...w} />)}\r\n        </Layer>\r\n        <Layer>\r\n          <Dots />\r\n          <Pellets/>\r\n        </Layer>\r\n        <Layer>\r\n          {[0, 1, 2, 3].map(i => <Ghost key={i} index={i} />)}\r\n          <Pacman />\r\n        </Layer>\r\n        <Layer>\r\n          <ModalText />\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Maze: React.ComponentClass<OwnProps> = connect(mapStateToProps, mapDispatchToProps)(MazeView);\r\n","import { Point } from './Point';\r\n\r\nexport class Rectangle {\r\n    readonly p1: Point;\r\n    readonly p2: Point;\r\n\r\n    constructor(x: number, y: number, dx: number, dy: number) {\r\n        this.p1 = new Point(x, y);\r\n        this.p2 = new Point(x + dx, y + dy);\r\n    }\r\n\r\n    public get x(): number { return this.p1.x};\r\n    public get y(): number { return this.p1.y};\r\n    public get dx(): number { return this.p2.x - this.p1.x};\r\n    public get dy(): number { return this.p2.y - this.p1.y};\r\n\r\n    inflate(delta: number | Point): Rectangle {\r\n      if (typeof (delta) === 'number')\r\n        return new Rectangle(this.x - delta, this.y - delta, this.dx + delta + delta, this.dy + delta + delta);\r\n      return new Rectangle(this.x - delta.x, this.y - delta.y, this.dx + delta.x + delta.x, this.dy + delta.y + delta.y);\r\n    }\r\n\r\n    moveBy(delta: Point): Rectangle {\r\n        return new Rectangle(this.x + delta.x, this.y + delta.y, this.dx, this.dy);\r\n    }\r\n\r\n  public get center(): Point {\r\n    return new Point(this.x + this.dx /2, this.y + this.dy / 2)\r\n  }\r\n}","import { Point, Direction, rotateDirection } from '.';\r\n\r\nexport class PathGenerator {\r\n\r\n  public static outlinePoints(points: Point[], gridOffset: Point, cellSize: Point): string {\r\n\r\n    let sparseHash = (p: Point) => p.y * 1000 + p.x;\r\n    let pixels = new Map<number, boolean>();\r\n    let startPoint: Point = new Point(0, 0);\r\n    let minHash: number = 100000;\r\n\r\n    points.forEach(p => {\r\n      const hash = sparseHash(p);\r\n      if (hash < minHash) {\r\n        minHash = hash;\r\n        startPoint = p;\r\n      }\r\n      pixels.set(hash, true);\r\n    });\r\n\r\n    let point = startPoint;\r\n\r\n    var hasPixelOnTheRight = (dir: Direction) => pixels.get(sparseHash(point.offset(Point.vector(dir))));\r\n\r\n    let direction = Direction.Right;\r\n\r\n    let outline: Point[] = [];\r\n\r\n    do {\r\n      outline.push(point.scale(cellSize).offset(gridOffset).offset(cellSize.scale(0.5)));\r\n      if (hasPixelOnTheRight(rotateDirection(direction, false))) {\r\n        direction = rotateDirection(direction, false);\r\n        point = point.offset(Point.vector(direction));\r\n      } else if (hasPixelOnTheRight(direction)) {\r\n        point = point.offset(Point.vector(direction));\r\n      } else {\r\n        direction = rotateDirection(direction, true);\r\n        point = point.offset(Point.vector(direction));\r\n      }\r\n    } while (!point.equals(startPoint));\r\n\r\n    return outline.reduce((acc, p, i, arr) => acc + this.renderPoint(i, arr, 0.4), '');\r\n  }\r\n\r\n  private static renderPoint(i: number, outline: Point[], radius: number): string {\r\n\r\n    function moveTowardsFractional(movingPoint: Point, targetPoint: Point, fraction: number): Point {\r\n      return movingPoint.offset(targetPoint.offset(movingPoint.negate).scale(fraction));\r\n    }\r\n\r\n    const p1 = outline[i];\r\n    const p0 = outline[i === 0 ? outline.length - 1 : i - 1];\r\n    const p2 = (i === outline.length - 1)\r\n      ? outline[0]\r\n      : outline[i + 1];\r\n\r\n    let result = '';\r\n\r\n    // The start and end of the curve are just our point moved towards the previous and neyt points, respectivly\r\n    let curveStart = moveTowardsFractional(p1, p0, radius);\r\n    let curveEnd = moveTowardsFractional(p1, p2, radius);\r\n\r\n    // The curve control points are halfway between the start/end of the curve and the original point\r\n    var startControl = moveTowardsFractional(curveStart, p1, .5);\r\n    var endControl = moveTowardsFractional(p1, curveEnd, .5);\r\n\r\n    if ((p0.x === p1.x && p1.x === p2.x) || (p0.y === p1.y && p1.y === p2.y))\r\n      // straight line, no adjustments\r\n      result += `${i === 0 ? 'M' : 'L'}${p1.x} ${p1.y}`;\r\n    else {\r\n      result = `L${curveStart.x} ${curveStart.y} C${startControl.x} ${startControl.y} ${endControl.x} ${endControl.y} ${curveEnd.x} ${curveEnd.y}`;\r\n    }\r\n\r\n    if (i === outline.length - 1) {\r\n      const close = moveTowardsFractional(p2, p1, radius);\r\n      result += `L${close.x} ${close.y}`;\r\n    }\r\n    return result;\r\n  }\r\n}","import { Point } from './Point';\r\n\r\nexport class WallAggregator {\r\n    public static aggregate(cells: Point[]): Point[][] {\r\n\r\n        // sort by x+y so we had better chance to have connected neighbours\r\n        var remaining = cells.sort((p1, p2) => { return (p1.x - p2.x) + (p1.y - p2.y)});\r\n\r\n\r\n        let extractAdjacent = (seed: Point) => {\r\n            let result: Point[] = [];\r\n            let lastDistance = 10000; // large enough for any maze\r\n            for(let i = 0; i < remaining.length; ) {\r\n                const p = remaining[i];\r\n                const distance = p.manhattanDistanceTo(seed);\r\n                if (distance === 1) {\r\n                    result.push(p);\r\n                    remaining.splice(i, 1);\r\n                } else if (distance > lastDistance + 40) {\r\n                    // optimization: we are going away of our point so stop looking. Not sure this is correct.\r\n                    break;\r\n                } else\r\n                    i++;\r\n                lastDistance = distance;\r\n            }        \r\n            return result;\r\n        }\r\n\r\n        let appendAdjacentRecursively = (wall: Point[], neighbours: Point[]) => {\r\n            for (let neighbour of neighbours) {\r\n                wall.push(neighbour);\r\n                appendAdjacentRecursively(wall, extractAdjacent(neighbour));\r\n            }\r\n        }\r\n\r\n        let walls: Point[][] = [];\r\n\r\n        let seed = remaining.shift();\r\n        while(seed !== undefined) {\r\n            let wall: Point[] = [];\r\n            appendAdjacentRecursively(wall, [seed]);\r\n            walls.push(wall);\r\n            seed = remaining.shift();\r\n        }\r\n\r\n        return walls;\r\n\r\n    }    \r\n}","export enum Direction {\r\n    None = 'none',\r\n    Up = 'up',\r\n    Left = 'left',\r\n    Down = 'down',\r\n    Right = 'right'\r\n}\r\n\r\nexport function revertDirection(direction: Direction): Direction {\r\n  switch (direction) {\r\n  case Direction.Down:\r\n    return Direction.Up;\r\n  case Direction.Up:\r\n    return Direction.Down;\r\n  case Direction.Left:\r\n    return Direction.Right;\r\n  case Direction.Right:\r\n    return Direction.Left;\r\n  default:\r\n    return Direction.None;\r\n  }  \r\n}\r\n\r\nexport function rotateDirection(direction: Direction, clockwise: boolean): Direction {\r\n  switch (direction) {\r\n  case Direction.Down:\r\n    return clockwise ? Direction.Left : Direction.Right;\r\n  case Direction.Up:\r\n      return clockwise ? Direction.Right : Direction.Left;\r\n  case Direction.Left:\r\n    return clockwise ? Direction.Up : Direction.Down;\r\n  case Direction.Right:\r\n    return clockwise ? Direction.Down : Direction.Up;\r\n  default:\r\n    return Direction.None;\r\n  }\r\n}\r\n\r\nexport const allDirections = [Direction.Up, Direction.Left, Direction.Down, Direction.Right];","import { Store } from '.';\r\nimport { Point } from '../geometry';\r\n\r\n\r\nconst \r\n  Noscore = \" \",\r\n  GhostSpawn = \"-\",\r\n  Dot = \"·\",\r\n  Gate = \"g\",\r\n  Fruit = \"●\",\r\n  Pacman = \"P\",\r\n  Ghost1 = \"1\",\r\n  Ghost2 = \"2\",\r\n  Ghost3 = \"3\",\r\n  Ghost4 = \"4\",\r\n  Textbox = \"T\";\r\n\r\n// Chars avaialable: ┐│┘└ ║╔╗═╚╝╧╤\r\n\r\nexport function parseMazeSchema(rows: string[]) {\r\n  const wallSymbols: Map<string, Store.WallType> = new Map([\r\n    [\"┌\", Store.WallType.nw],\r\n    [\"┐\", Store.WallType.ne],\r\n    [\"─\", Store.WallType.n],\r\n    [\"│\", Store.WallType.w],\r\n    [\"└\", Store.WallType.sw],\r\n    [\"┘\", Store.WallType.se],\r\n    [\"║\", Store.WallType.W],\r\n    [\"═\", Store.WallType.N],\r\n    [\"╔\", Store.WallType.NW],\r\n    [\"╗\", Store.WallType.NE],\r\n    [\"╚\", Store.WallType.SW],\r\n    [\"╝\", Store.WallType.SE],\r\n    [\"╕\", Store.WallType.Ne],\r\n    [\"╒\", Store.WallType.Nw],\r\n    [\"╙\", Store.WallType.Ws],\r\n    [\"╓\", Store.WallType.Wn],\r\n    [\"╜\", Store.WallType.Es],\r\n    [\"╖\", Store.WallType.En],\r\n  ]);\r\n\r\n  const pellets = new Array<Point>();\r\n  const dots = new Array<Point>();\r\n  const passes = new Array<Store.Pass>();\r\n  const pacman = new Array<Point>();\r\n  let gate: Point = new Point(0,0);\r\n  let walls: Store.Wall[] = [];\r\n  let ghostInitPos : Point[] = [];\r\n  let textPos: Point[] = [];\r\n\r\n\r\n  for (let y = 0; y < rows.length; y++) {\r\n    const row = rows[y];\r\n    for (let x = 0; x < row.length; x++) {\r\n      let point = new Point(x, y);\r\n      switch (row[x]) {\r\n        case Fruit:\r\n          pellets.push(point);\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          break;\r\n\r\n        case Dot:\r\n          dots.push(point);\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          break;\r\n\r\n        case Pacman:\r\n          pacman.push(point);\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          break;\r\n\r\n        case Gate:\r\n          if (gate.x === 0)\r\n            gate = point;\r\n\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: true,\r\n          });\r\n          break;\r\n\r\n        case Noscore:\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          break;\r\n\r\n        case Textbox:\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          textPos.push(point);\r\n          break;\r\n\r\n        case GhostSpawn:\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: true\r\n          });\r\n          break;\r\n\r\n        case Ghost1:\r\n          ghostInitPos[0] = point;\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: false\r\n          });\r\n          break;\r\n\r\n        case Ghost2:\r\n          ghostInitPos[1] = point;\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: true\r\n          });\r\n\r\n          break;\r\n\r\n        case Ghost3:\r\n          ghostInitPos[2] = point;\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: true\r\n          });\r\n          break;\r\n\r\n        case Ghost4:\r\n          ghostInitPos[3] = point;\r\n          passes.push({\r\n            gridPos: point,\r\n            ghostOnly: true\r\n          });\r\n          break;\r\n\r\n        default:\r\n          {\r\n            let wall = wallSymbols.get(row[x]);\r\n            const isPassable = (x: number, y: number) => y >= 0 && y < rows.length && x >= 0 && x < rows[0].length && [Dot, Noscore, Fruit].indexOf(rows[y][x]) >= 0;\r\n\r\n            if (wall === Store.WallType.N && isPassable(x, y - 1)) {\r\n                wall = Store.WallType.S;\r\n            }\r\n            else if (wall === Store.WallType.W && isPassable(x-1, y)) {\r\n                wall = Store.WallType.E;\r\n            }\r\n            else if (wall === Store.WallType.NW && isPassable(x-1, y)) {\r\n                wall = Store.WallType.NW2;\r\n            }\r\n            else if (wall === Store.WallType.NE && isPassable(x+1, y)) {\r\n                wall = Store.WallType.NE2;\r\n            }\r\n            else if (wall === Store.WallType.SE && isPassable(x+1, y)) {\r\n                wall = Store.WallType.SE2;\r\n            }\r\n            else if (wall === Store.WallType.SW && isPassable(x-1, y)) {\r\n                wall = Store.WallType.SW2;\r\n            }\r\n            if (wall !== undefined)\r\n              walls.push({\r\n                position: point,\r\n                type: wall\r\n              });\r\n          }\r\n          break;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  const pacmanInitPos = pacman.reduce((a, c) => a.offset(c), new Point(0, 0))\r\n    .scale(1 / pacman.length);\r\n  const textCenter = textPos.reduce((a, c) => a.offset(c), new Point(0, 0))\r\n    .scale(1 / textPos.length);\r\n\r\n  const gridSize = new Point(rows[0].length, rows.length);\r\n  return {\r\n      pellets,\r\n      dots,\r\n      passes,\r\n      walls,\r\n      pacmanInitPos,\r\n      ghostInitPos,\r\n      gridSize,\r\n      textCenter,\r\n      gate\r\n  }\r\n}","export const mazeSchema1: string[] = \r\n[\r\n  \"╔════════════╕╒════════════╗\",\r\n  \"║············││············║\",\r\n  \"║·┌──┐·┌───┐·││·┌───┐·┌──┐·║\",\r\n  \"║●│░░│·│░░░│·││·│░░░│·│░░│●║\",\r\n  \"║·└──┘·└───┘·└┘·└───┘·└──┘·║\",\r\n  \"║··························║\",\r\n  \"║·┌──┐·┌┐·┌──────┐·┌┐·┌──┐·║\",\r\n  \"║·└──┘·││·└──┐┌──┘·││·└──┘·║\",\r\n  \"║······││····││····││······║\",\r\n  \"╚════╗·│└──┐·││·┌──┘│·╔════╝\",\r\n  \"░░░░░║·│┌──┘·└┘·└──┐│·║░░░░░\",\r\n  \"░░░░░║·││    11    ││·║░░░░░\",\r\n  \"░░░░░║·││ ╔══gg══╗ ││·║░░░░░\",\r\n  \"═════╝·└┘ ║------║ └┘·╚═════\",\r\n  \"      ·   ║223344║   ·      \",\r\n  \"═════╗·┌┐ ║223344║ ┌┐·╔═════\",\r\n  \"░░░░░║·││ ╚══════╝ ││·║░░░░░\",\r\n  \"░░░░░║·││    TT    ││·║░░░░░\",\r\n  \"░░░░░║·││ ┌──────┐ ││·║░░░░░\",\r\n  \"╔════╝·└┘ └──┐┌──┘ └┘·╚════╗\",\r\n  \"║············││············║\",\r\n  \"║·┌──┐·┌───┐·││·┌───┐·┌──┐·║\",\r\n  \"║●└─┐│·└───┘·└┘·└───┘·│┌─┘●║\",\r\n  \"║···││········P·······││···║\",\r\n  \"╙─┐·││·┌┐·┌──────┐·┌┐·││·┌─╜\",\r\n  \"╓─┘·└┘·││·└──┐┌──┘·││·└┘·└─╖\",\r\n  \"║······││····││····││······║\",\r\n  \"║·┌────┘└──┐·││·┌──┘└────┐·║\",\r\n  \"║·└────────┘·└┘·└────────┘·║\",\r\n  \"║··························║\",\r\n  \"╚══════════════════════════╝\"\r\n];\r\n","export * from './Wall';\r\nexport * from './Dots';\r\nexport * from './Pellets';","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { Point } from '../geometry';\r\nimport { Circle, Group } from 'react-konva';\r\nimport { Store } from '../model';\r\nimport { connect } from 'react-redux';\r\n\r\nexport type DotsProps = {\r\n    dots: Store.Loot[];\r\n    cellSize: Point;\r\n};\r\n\r\nexport type DotProps = {\r\n    center: Point;\r\n    radius: number;\r\n    visible: boolean;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App): DotsProps => ({\r\n  dots: state.round.dots,\r\n  cellSize: state.game.maze.cellSize,\r\n});\r\n\r\nclass DotView extends React.Component<DotProps, {}> {\r\n  public shouldComponentUpdate(nextProps: DotProps, nextState: {}) {\r\n    return nextProps.visible  !== this.props.visible;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Circle\r\n        x={this.props.center.x}\r\n        y={this.props.center.y}\r\n        visible={this.props.visible}\r\n        fill=\"darkgray\"\r\n        stroke=\"darkgray\"\r\n        radius={this.props.radius}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass DotsView extends React.Component<DotsProps> {\r\n  static countVisible = (props: DotsProps): number => props.dots.reduce((a, l) => a + (l.collected ? 0 : 1), 0);\r\n \r\n  render() {\r\n    const dots =\r\n      this.props.dots.map(p => ({\r\n        bounds: p.position.scale(this.props.cellSize).toRectangle(this.props.cellSize),\r\n        visible: !p.collected\r\n      }));\r\n\r\n    return (\r\n      <Group>\r\n        {dots.map((b, i) => <DotView key={i} center={b.bounds.center} visible={b.visible} radius={b.bounds.dx / 10} />)}\r\n      </Group>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({});\r\n\r\nexport const Dots = connect(mapStateToProps, mapDispatchToProps)(DotsView);","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { Point } from '../geometry';\r\nimport { Circle, Group } from 'react-konva';\r\nimport { Store } from '../model';\r\nimport { connect } from 'react-redux';\r\n\r\nexport type PelletProps = {\r\n  pellets: Store.Loot[];\r\n  cellSize: Point;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n};\r\n\r\nconst pelletsView = (props: PelletProps, disp: ConnectedDispatch) => {\r\n  const bounds =\r\n    props.pellets.map(p => ({\r\n      bounds: p.position.scale(props.cellSize).toRectangle(props.cellSize),\r\n      visible: !p.collected,\r\n}));\r\n\r\n  return (\r\n    <Group>\r\n      {bounds.map((b, i) =>\r\n        <Circle\r\n            key={i}\r\n            visible={b.visible}\r\n            x={b.bounds.center.x}\r\n            y={b.bounds.center.y}\r\n            fill=\"darkgray\"\r\n            stroke=\"none\"\r\n            radius={b.bounds.dx / 3} \r\n        />\r\n      )}\r\n    </Group>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App): PelletProps => ({\r\n  pellets: state.round.pellets,\r\n  cellSize: state.game.maze.cellSize,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n});\r\n\r\nexport const Pellets = connect(mapStateToProps, mapDispatchToProps)(pelletsView);","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { Point, Direction } from '../geometry';\r\nimport { Arc } from 'react-konva';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../model';\r\n\r\ntype ConnectedState = {\r\n  cellSize: Point;\r\n  position: Point;\r\n  mouthAngle: number;\r\n  direction: Direction;\r\n  visible: boolean;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n};\r\n\r\ntype OwnProps = {\r\n};\r\n\r\ntype OwnState = {\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n  cellSize: state.game.maze.cellSize,\r\n  position: state.heat.pacman.position,\r\n  direction: state.heat.pacman.direction,\r\n  mouthAngle: state.heat.pacman.mouthAngle,\r\n  visible: !state.heat.pacman.hidden\r\n\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n});\r\n\r\nclass PacmanView extends React.Component<ConnectedState, OwnState> {\r\n\r\n  render() {\r\n    const props = this.props;\r\n    const absPos = props.position.scale(props.cellSize).offset(props.cellSize.scale(.5));\r\n\r\n    const calcRotation = (dir: Direction) => {\r\n      switch (dir) {\r\n      case Direction.Up:\r\n        return -90;\r\n      case Direction.Down:\r\n        return 90;\r\n      case Direction.Left:\r\n        return 180;\r\n      case Direction.Right:\r\n      default:\r\n        return 0;\r\n      }\r\n    };\r\n\r\n    const rotation = calcRotation(props.direction) + props.mouthAngle / 2;\r\n    return (\r\n      <Arc\r\n        visible={props.visible} \r\n        x={absPos.x}\r\n        y={absPos.y}\r\n        angle={-props.mouthAngle}\r\n        rotation={rotation}\r\n        innerRadius={0}\r\n        outerRadius={props.cellSize.y - 4}\r\n        fill=\"yellow\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const Pacman: React.ComponentClass<OwnProps> =\r\n  connect(mapStateToProps, mapDispatchToProps)(PacmanView);\r\n","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { Point, Direction } from '../geometry';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../model';\r\nimport { Group, Path, Circle } from 'react-konva';\r\n\r\ntype ConnectedState = {\r\n    cellSize: Point;\r\n    position: Point;\r\n    direction: Direction;\r\n    scared: boolean;\r\n    visible: boolean;\r\n};\r\n\r\ntype OwnProps = {\r\n    index: number;\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n    cellSize: state.game.maze.cellSize,\r\n    position: state.heat.ghosts[ownProps.index].position,\r\n    direction: state.heat.ghosts[ownProps.index].direction,\r\n    visible: state.heat.ghosts[ownProps.index].state !== Store.GhostState.hidden,\r\n    scared: state.heat.ghosts[ownProps.index].state === Store.GhostState.scared\r\n});\r\n\r\ninterface ConnectedDispatch {\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n});\r\n\r\nclass GhostView extends React.Component<ConnectedState & OwnProps, {}> {\r\n\r\n    color(): string {\r\n        if (this.props.scared) {\r\n            return 'blue';\r\n        }\r\n        switch (this.props.index) {\r\n        case 0:\r\n            return 'red'; // blinky\r\n        case 1:\r\n            return 'cyan'; // inky\r\n        case 2:\r\n            return 'pink'; // pinky\r\n        case 3:\r\n            return 'orange'; // clyde\r\n        default:\r\n            return 'error';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const absPos = props.position.scale(props.cellSize).offset(props.cellSize.negate.scale(0.5));\r\n\r\n        const eyeOffset = Point.vector(this.props.direction).scale(2);\r\n\r\n        const leftEye = new Point(8, 13).offset(eyeOffset);\r\n        const rightEye = new Point(20, 13).offset(eyeOffset);\r\n\r\n        const padding = 4;\r\n        const scaleX = 2 * (props.cellSize.x - padding) / 28;\r\n        const scaleY = 2 * (props.cellSize.y - padding) / 28;\r\n\r\n        return (\r\n            <Group visible={props.visible} x={absPos.x + padding} y={absPos.y + padding} scaleX={scaleX} scaleY={scaleY}>\r\n                <Path \r\n                    data=\"M0 28 L0 14 C0 6 6 0 14 0 C22 0 28 6 28 14 L28 28 L23.333 23.333 L18.666 28 L14 23.333 L9.333 28 L4.666 23.333 L0 28\"\r\n                    fill={this.color()}\r\n                    stroke=\"black\" \r\n                    strokeWidth={1 / scaleX}\r\n                />\r\n                <Path \r\n                    data=\"M8 8 C5 8 4 11 4 13 C4 15 5 18 8 18 C11 18 12 15 12 13 C12 11 11 8 8 8 M20 8 C17 8 16 11 16 13 C16 15 17 18 20 18 C23 18 24 15 24 13 C24 11 23 8 20 8\"\r\n                    fill=\"white\"\r\n                    stroke=\"black\" \r\n                    strokeWidth={1 / scaleX}\r\n                />\r\n                <Circle radius={2} x={rightEye.x} y={rightEye.y} fill=\"black\"/>\r\n                <Circle radius={2} x={leftEye.x} y={leftEye.y} fill=\"black\"/>\r\n            </Group>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport const Ghost: React.ComponentClass<OwnProps> =\r\n    connect(mapStateToProps, mapDispatchToProps)(GhostView);","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { Point } from '../geometry';\r\nimport { Text } from 'react-konva';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../model';\r\n\r\ntype ConnectedState = {\r\n  mazeSize: Point;\r\n  textCenter: Point;\r\n  cellSize: Point;\r\n  text?: string;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n};\r\n\r\ntype OwnProps = {\r\n};\r\n\r\ntype OwnState = {\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n  mazeSize: state.game.maze.gridSize.scale(state.game.maze.cellSize),\r\n  textCenter: state.game.maze.textPos,\r\n  cellSize: state.game.maze.cellSize,\r\n  text: state.game.modalText\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n});\r\n\r\nclass ModalTextView extends React.Component<ConnectedState, OwnState> {\r\n  render() {\r\n    const mazeSize = this.props.mazeSize;\r\n\r\n    return (\r\n      <Text\r\n        x={0}\r\n        y={this.props.textCenter.scale(this.props.cellSize).y}\r\n        fill=\"yellow\"\r\n        text={this.props.text || ''}\r\n        visible={this.props.text !== undefined}  \r\n        fontSize={this.props.cellSize.y * 1.5}\r\n        fontStyle=\"bold\"\r\n        fontFamily=\"fantasy\"\r\n        width={mazeSize.x}\r\n        padding={0}\r\n        align=\"center\"\r\n      />);\r\n  }\r\n}\r\n\r\nexport const ModalText: React.ComponentClass<OwnProps> =\r\n  connect(mapStateToProps, mapDispatchToProps)(ModalTextView);","import * as React from 'react';\r\nimport * as redux from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../model';\r\nimport './Hud.css';\r\n\r\ntype ConnectedState = {\r\n  score: number;\r\n  lives: number;\r\n};\r\n\r\ntype ConnectedDispatch = {\r\n};\r\n\r\ntype OwnProps = {\r\n};\r\n\r\ntype OwnState = {\r\n};\r\n\r\nconst mapStateToProps = (state: Store.App, ownProps: OwnProps): ConnectedState => ({\r\n  score: state.game.score,\r\n  lives: state.game.lives\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: redux.Dispatch<Store.App>): ConnectedDispatch => ({\r\n});\r\n\r\nclass HudView extends React.Component<ConnectedState, OwnState> {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"hud\">\r\n        <div className=\"score\">\r\n          <span className=\"label\">Score</span>\r\n          <span className=\"value\">{this.props.score}</span>\r\n        </div>\r\n        <div className=\"lives\">\r\n          <span className=\"label\">Lives</span>\r\n          <span className=\"value\">{this.props.lives}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Hud: React.ComponentClass<OwnProps> =\r\n  connect(mapStateToProps, mapDispatchToProps)(HudView);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (!installingWorker) {\r\n                return;\r\n            }\r\n\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.'); // tslint:disable-line\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.'); // tslint:disable-line\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error); // tslint:disable-line\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","  //import { combineReducers } from 'redux';\r\nimport { pacmanReducer } from './Pacman';\r\nimport { ghostReducer } from './Ghost';\r\nimport { gameReducer } from './Game';\r\nimport { roundReducer } from './Round';\r\nimport { heatReducer } from './Heat';\r\nimport { Store } from '../model';\r\nimport { Action, HasInducedActions as IHasInducedActions } from \"../actions/index\";\r\nimport { getMazeNavigator } from \"../model/cache\";\r\n\r\nexport const rootReducer = (state: Store.App, action: Action) : Store.App => {\r\n  const mazeNavigator = getMazeNavigator(state);\r\n  let events: Action[] = [];\r\n\r\n  const pacman = pacmanReducer(state.heat.pacman, action, state.round.dots, state.round.pellets, mazeNavigator, events);\r\n  const ghosts = ghostReducer(state.heat.ghosts, action, pacman, mazeNavigator, events);\r\n\r\n  const heat = heatReducer(state.heat, action, pacman, ghosts, events);\r\n\r\n  const round = roundReducer(state.round, action, heat, events);\r\n\r\n  const game = gameReducer(state.game, action, events);\r\n\r\n  const asyncDispatch = (<IHasInducedActions><any>action).asyncDispatch;\r\n  if (asyncDispatch)\r\n    asyncDispatch(events);\r\n\r\n  return {\r\n    heat: heat,\r\n    game: game,\r\n    round: round,\r\n  }\r\n\r\n};","import { Action, ANIMATION_STEP_ACTION, CHANGE_DIRECTION_ACTION, RELEASE_PACMAN_ACTION, dotEatenAction, pelletEatenAction, FREEZE_ACTORS_ACTION, KILL_PACMAN_ACTION, HIDE_ACTORS_ACTION } from \"../actions\";\r\nimport { Store } from '../model';\r\nimport { IMazeNavigator } from '../model/MazeNavigator';\r\nimport { Direction } from \"../geometry\";\r\nimport { PacmanAnimator } from '../domain/pacmanAnimator';\r\nimport { createCollisionDetector } from '../model/CollisionDetector';\r\n\r\nexport function pacmanReducer(state: Store.Pacman, action: Action, dots: Store.Loot[], pellets: Store.Loot[], mazePath: IMazeNavigator, events: Action[]): Store.Pacman {\r\n\r\n  switch (action.type) {\r\n  case ANIMATION_STEP_ACTION:\r\n\r\n    state = PacmanAnimator.step(state, action.timestamp, action.period, mazePath);\r\n\r\n    const collisionDetector = createCollisionDetector();\r\n\r\n    const dotLooted = collisionDetector.checkLoot(state.position, dots);\r\n    if (dotLooted !== null)\r\n      events.push(dotEatenAction(dotLooted));\r\n\r\n    const pelletLooted = collisionDetector.checkLoot(state.position, pellets);\r\n    if (pelletLooted !== null)\r\n      events.push(pelletEatenAction(pelletLooted));\r\n\r\n    return state;\r\n\r\n  case CHANGE_DIRECTION_ACTION:\r\n    if (!state.running)\r\n      return state;\r\n\r\n    // ignore if key matches current direction\r\n    if (action.direction === state.direction && state.running === true)\r\n      return {\r\n        ...state,\r\n        nextDirection: Direction.None\r\n      }\r\n\r\n    // perform immediate turn if avaialble\r\n    const exactPos = state.position.round(1);\r\n    if ((exactPos.equals(state.position) || !state.running) && mazePath.hasNeighbour(exactPos, action.direction, true)) {\r\n      const direction = action.direction;\r\n      return {\r\n        ...state,\r\n        direction: direction,\r\n        position: exactPos,\r\n        nextDirection: Direction.None,\r\n        running: direction != Direction.None\r\n      };\r\n    }\r\n\r\n    // \r\n    return { ...state, nextDirection: action.direction  }\r\n\r\n\r\n  case RELEASE_PACMAN_ACTION:\r\n    return { ...state, running: true, chomping: true }\r\n\r\n  case FREEZE_ACTORS_ACTION:\r\n    return { ...state, running: false, chomping: false }\r\n\r\n  case HIDE_ACTORS_ACTION:\r\n    return { ...state, hidden: true }\r\n\r\n  case KILL_PACMAN_ACTION:\r\n    return { ...state, dying: true, chomping: false }\r\n\r\n\r\n  default:\r\n    return state;\r\n  }\r\n}\r\n\r\n","import { Store } from '../model/index';\r\nimport { Point, Direction } from '../geometry';\r\nimport { IMazeNavigator } from '../model/MazeNavigator';\r\nimport * as iassign from 'immutable-assign';\r\n\r\nexport class PacmanAnimator {\r\n\r\n  public static step(state: Store.Pacman, timestamp: number, period: number, mazePath: IMazeNavigator): Store.Pacman  {\r\n\r\n    if (state.chomping)\r\n      state = PacmanAnimator.chomp(state, timestamp);\r\n\r\n    if (state.running)\r\n      state = PacmanAnimator.move(state, period, mazePath);\r\n\r\n    if (state.dying)\r\n      state = PacmanAnimator.die(state, timestamp);\r\n\r\n    return state;\r\n  }\r\n\r\n  private static chomp(state: Store.Pacman, timestamp: number): Store.Pacman {\r\n    const chompMillis = 200;\r\n    const ms = timestamp % chompMillis;\r\n    let angle = Math.round(90 * Math.abs(ms - chompMillis / 2) / (chompMillis / 2));\r\n    // prevent flicking when angle reaches 0\r\n    if (angle <= 0)\r\n      angle = 0.1;\r\n    return iassign(\r\n      state,\r\n      (s: Store.Pacman) => {\r\n        s.mouthAngle = angle;\r\n        return s;\r\n      });\r\n  }\r\n\r\n  private static die(state: Store.Pacman, timestamp: number): Store.Pacman {\r\n    let angle = state.mouthAngle === 0 ? 0 : state.mouthAngle + 4;\r\n    return iassign(state, s => {\r\n      if (angle < 360)\r\n        s.mouthAngle = angle;\r\n      else\r\n        s.mouthAngle = 0;\r\n      return s;\r\n    });\r\n  }\r\n\r\n  private static move(state: Store.Pacman, period: number, mazePath: IMazeNavigator): Store.Pacman {\r\n    const delta = state.speed / 1000 * period;\r\n    let newPos = state.position.offset(Point.vector(state.direction).scale(delta)).round(10);\r\n\r\n    // check if need to turn because of preliminary arrow key press\r\n    if (newPos.equals(newPos.round(1)) &&\r\n      state.nextDirection !== Direction.None &&\r\n      mazePath.hasNeighbour(newPos, state.nextDirection, true)) {\r\n      state = iassign(\r\n        state,\r\n        (s: Store.Pacman) => {\r\n          s.direction = state.nextDirection;\r\n          s.nextDirection = Direction.None;\r\n          s.position = newPos;\r\n          return s;\r\n        });\r\n      return state;\r\n    }\r\n\r\n    const bumped = (state.direction === Direction.Right || state.direction === Direction.Down) &&\r\n      !mazePath.hasNeighbour(newPos, state.direction, true) ||\r\n      (state.direction === Direction.Left || state.direction === Direction.Up) && !mazePath.canEnter(newPos);\r\n    if (bumped) {\r\n      newPos = newPos.round(1);\r\n      state = iassign(\r\n        state,\r\n        (s: Store.Pacman) => {\r\n          state.running = false;\r\n          return s;\r\n        });\r\n    }\r\n\r\n    state = iassign(\r\n      state,\r\n      (s: Store.Pacman) => {\r\n        s.position = newPos;\r\n        return s;\r\n      });\r\n    return state;\r\n  }\r\n}","import { Action, ANIMATION_STEP_ACTION, RELEASE_GHOST_ACTION, FREEZE_ACTORS_ACTION, ghostBittenAction, HIDE_ACTORS_ACTION, BOUNCE_GHOST_ACTION, ghostLeftBoxAction, BRING_GHOST_OUT_ACTION, START_BLUE_MODE_ACTION, END_BLUE_MODE_ACTION } from \"../actions\";\r\nimport { Store } from \"../model\";\r\nimport { IMazeNavigator } from \"../model/MazeNavigator\";\r\nimport { Point, allDirections, revertDirection, Direction } from '../geometry';\r\nimport { createCollisionDetector } from \"../model/CollisionDetector\";\r\nimport { Mutator } from \"./Mutator\";\r\n\r\nfunction getRandomInt(max: number) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nclass MutableGhost implements Store.Ghost {\r\n  state: Store.GhostState;\r\n  direction: Direction;\r\n  speed: number;\r\n  position: Point;\r\n}\r\n\r\nclass GhostMutator extends Mutator<Store.Ghost, MutableGhost> {\r\n  public advance(period: number): void {\r\n    const ghostPositionRounding = 10;\r\n    const delta = this.mutable.speed / 1000 * period;\r\n    const offset = Point.vector(this.mutable.direction).scale(delta);\r\n    this.mutable.position = this.mutable.position.offset(offset).round(ghostPositionRounding);\r\n  }\r\n\r\n  public startMoving(): void {\r\n    this.mutable.state = Store.GhostState.running;\r\n  }\r\n\r\n  public startBouncing(): void {\r\n    this.mutable.state = Store.GhostState.bouncing;\r\n    this.mutable.direction = Direction.Down;\r\n  }\r\n\r\n  public freeze(): void {\r\n    this.mutable.state = Store.GhostState.frozen;\r\n  }\r\n\r\n  public startLeaveBox(): void {\r\n    this.mutable.state = Store.GhostState.leavingBox;\r\n  }\r\n\r\n  public hide(): void {\r\n    this.mutable.state = Store.GhostState.hidden;\r\n  }\r\n\r\n  public startBlueMode(pacmanPosition: Point): void {\r\n    if (this.state.state == Store.GhostState.running)\r\n      this.mutable.direction = revertDirection(this.mutable.direction); \r\n    this.mutable.state = Store.GhostState.scared;\r\n  }\r\n\r\n  public endBlueMode(): void {\r\n    if (this.state.state == Store.GhostState.scared)\r\n      this.mutable.state = Store.GhostState.running;\r\n  }\r\n\r\n  public coerceDirection(direction: Direction): void {\r\n    this.mutable.direction = direction;\r\n  }\r\n\r\n  public decideChasingDirection(allowedDirections: Direction[], pacmanPosition: Point, ghostIndex: number, pacmanDirection: Direction, blinkyPosition: Point): void {\r\n    let decision: number = 0;\r\n    switch (ghostIndex) {\r\n      case 0:\r\n        decision = this.blinkyDecision(allowedDirections, pacmanPosition);\r\n        break;\r\n      case 1:\r\n        decision = this.inkyDecision(allowedDirections, pacmanPosition, pacmanDirection, blinkyPosition);\r\n        break;\r\n      case 2:\r\n        decision = this.pinkyDecision(allowedDirections, pacmanPosition, pacmanDirection);\r\n        break;\r\n      default:\r\n        decision = getRandomInt(allowedDirections.length);\r\n    }\r\n    this.mutable.direction = allowedDirections[decision];\r\n  }\r\n\r\n  public decideRunawayDirection(allowedDirections: Direction[], pacmanPosition: Point): void {\r\n    let decision: number = 0;\r\n    if (allowedDirections.length == 1)\r\n      decision = 0;\r\n    else {\r\n      allowedDirections = allowedDirections.filter(d => d != revertDirection(this.state.direction));\r\n      const distances = allowedDirections.map(d => this.mutable.position.offset(Point.vector(d)).euclidDistanceTo(pacmanPosition));\r\n      decision = distances.reduce((closestIndex, distance, i) => distance > distances[closestIndex] ? i : closestIndex, 0);\r\n    }\r\n    this.mutable.direction = allowedDirections[decision];\r\n  }\r\n\r\n  blinkyDecision(allowedDirections: Direction[], pacmanPosition: Point) : number {\r\n    const distances = allowedDirections.map(d => this.mutable.position.offset(Point.vector(d)).euclidDistanceTo(pacmanPosition));\r\n    return distances.reduce((closestIndex, distance, i) => distance < distances[closestIndex] ? i : closestIndex, 0);\r\n    \r\n  }\r\n\r\n  pinkyDecision(allowedDirections: Direction[], pacmanPosition: Point, pacmanDirection: Direction) : number {\r\n      const distances = allowedDirections.map(d => this.mutable.position.offset(Point.vector(d))\r\n          .euclidDistanceTo(pacmanPosition.offset(Point.vector(pacmanDirection).scale(4))));\r\n    return distances.reduce((closestIndex, distance, i) => distance < distances[closestIndex] ? i : closestIndex, 0);\r\n  }\r\n\r\n  inkyDecision(allowedDirections: Direction[], pacmanPosition: Point, pacmanDirection: Direction, blinkyPosition: Point): number {\r\n    const twoCellsAhead = pacmanPosition.offset(Point.vector(pacmanDirection).scale(2));\r\n    const blinkyVector = twoCellsAhead.offset(blinkyPosition.negate).scale(2).offset(blinkyPosition); \r\n    const distances = allowedDirections.map(d => this.mutable.position.offset(Point.vector(d))\r\n      .euclidDistanceTo(blinkyVector));\r\n    return distances.reduce((closestIndex, distance, i) => distance < distances[closestIndex] ? i : closestIndex, 0);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function ghostReducer(states: Store.Ghost[], action: Action, pacman: Store.Pacman, mazeNavigator: IMazeNavigator, events: Action[]): Store.Ghost[] {\r\n\r\n  let ghosts = states.map(s => new GhostMutator(s));\r\n\r\n  switch (action.type) {\r\n    case ANIMATION_STEP_ACTION:\r\n      const collisionDetector = createCollisionDetector();\r\n      let biteEventPosted = false;\r\n      ghosts.forEach((ghost, index) => {\r\n        if (ghost.state.state != Store.GhostState.frozen && ghost.state.state != Store.GhostState.hidden) {\r\n          if (ghost.state.position.equals(ghost.state.position.round(1))) {\r\n            switch (ghost.state.state) {\r\n              case Store.GhostState.running:\r\n                const possibleDirections = allDirections.filter(d => mazeNavigator.hasNeighbour(ghost.state.position, d, true));\r\n                if (possibleDirections.length === 1) {\r\n                  if (ghost.state.direction != possibleDirections[0])\r\n                    ghost.coerceDirection(possibleDirections[0]);\r\n                } else\r\n                  ghost.decideChasingDirection(possibleDirections.filter(d => d != revertDirection(ghost.state.direction)),\r\n                    pacman.position,\r\n                    index,\r\n                    pacman.direction,\r\n                    ghosts[0].state.position);\r\n                break;\r\n\r\n              case Store.GhostState.bouncing:\r\n                if (!mazeNavigator.hasNeighbour(ghost.state.position, ghost.state.direction, false) ||\r\n                  (ghost.state.direction == Direction.Up && !mazeNavigator.canGhostBounceUp(ghost.state.position)))\r\n                  ghost.coerceDirection(revertDirection(ghost.state.direction));\r\n                break;\r\n\r\n              case Store.GhostState.leavingBox:\r\n                if (mazeNavigator.isGhostOutOfTheBox(ghost.state.position))\r\n                  events.push(ghostLeftBoxAction(index));\r\n                else {\r\n                  const exitDirection = mazeNavigator.directionTowardsGate(ghost.state.position);\r\n                  if (exitDirection != ghost.state.direction)\r\n                    ghost.coerceDirection(exitDirection);\r\n                }\r\n                break;\r\n              case Store.GhostState.scared:\r\n                ghost.decideRunawayDirection(allDirections.filter(d => mazeNavigator.hasNeighbour(ghost.state.position, d, true)), pacman.position);\r\n                break;\r\n            }\r\n          }\r\n\r\n          ghost.advance(action.period);\r\n          if (!biteEventPosted && collisionDetector.checkBite(pacman.position, ghost.state.position)) {\r\n            events.push(ghostBittenAction(pacman.position, index));\r\n            biteEventPosted = true;\r\n\r\n          }\r\n        }\r\n      });\r\n      break;\r\n\r\n    case RELEASE_GHOST_ACTION:\r\n      ghosts[action.index].startMoving();\r\n      break;\r\n\r\n    case BRING_GHOST_OUT_ACTION:\r\n      ghosts[action.index].startLeaveBox();\r\n      break;\r\n\r\n    case BOUNCE_GHOST_ACTION:\r\n      ghosts[action.index].startBouncing();\r\n      break;\r\n\r\n    case FREEZE_ACTORS_ACTION:\r\n      ghosts.forEach(ghost => ghost.freeze());\r\n      break;\r\n\r\n    case HIDE_ACTORS_ACTION:\r\n      ghosts.forEach(ghost => ghost.hide());\r\n      break;\r\n\r\n    case START_BLUE_MODE_ACTION:\r\n      ghosts.forEach(ghost => ghost.startBlueMode(pacman.position));\r\n      break;\r\n\r\n    case END_BLUE_MODE_ACTION:\r\n      ghosts.forEach(ghost => ghost.endBlueMode());\r\n      break;\r\n      \r\n     default:\r\n       break; \r\n  }\r\n  return ghosts.map(m => m.state);\r\n}\r\n","export class Mutator<TReadOnly, TMutable extends TReadOnly> {\r\n  private _readOnly: TReadOnly;\r\n  private _mutable: TMutable;\r\n\r\n  protected get mutable(): TMutable {\r\n    if (!this._mutable)\r\n      this._mutable = Object.assign(<TMutable>{}, this._readOnly);\r\n    return this._mutable;\r\n  }\r\n\r\n  get state(): TReadOnly {\r\n    return !this._mutable ? this._readOnly : this._mutable;\r\n  }\r\n\r\n  constructor(readOnly: TReadOnly) {\r\n    this._readOnly = readOnly;\r\n  }\r\n}\r\n\r\n","import { Action, PAUSE_COMMAND_ACTION, MODAL_TEXT_ACTION, DOT_EATEN_ACTION, GHOST_BITTEN_ACTION, PELLET_EATEN_ACTION, heatEndAction, SHOW_LEVEL_ACTION, INCREASE_LEVEL_ACTION } from '../actions';\r\nimport { Store } from '../model';\r\nimport * as iassign from 'immutable-assign';\r\n\r\n\r\nexport function gameReducer(state: Store.Game, action: Action, events: Action[]): Store.Game {\r\n\r\n  let result = state;\r\n\r\n  switch (action.type) {\r\n    case PAUSE_COMMAND_ACTION:\r\n      result = iassign(result, (r: Store.Game) => { r.paused = !r.paused; return r; });\r\n      break;\r\n    case MODAL_TEXT_ACTION:\r\n      result = iassign(result, (r: Store.Game) => { r.modalText = action.text; return r; });\r\n      break;\r\n\r\n    case SHOW_LEVEL_ACTION:\r\n      result = iassign(result, (r: Store.Game) => { r.modalText = `Level ${r.level}`; return r; });\r\n      break;\r\n\r\n    case DOT_EATEN_ACTION:\r\n      result = iassign(result, r => { r.score += 10; return r; });\r\n      break;\r\n\r\n    case PELLET_EATEN_ACTION:\r\n      result = iassign(result, r => { r.score += 50; return r; });\r\n      break;\r\n\r\n    case GHOST_BITTEN_ACTION:\r\n      result = iassign(result, r => { if (r.lives > 0) r.lives--; return r; });\r\n      events.push(heatEndAction(true));\r\n      break;\r\n\r\n    case INCREASE_LEVEL_ACTION:\r\n      result = iassign(result, r => { r.level++; return r; });\r\n      break;\r\n\r\n    default:\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Store } from '../model';\r\nimport { Action, DOT_EATEN_ACTION, PELLET_EATEN_ACTION, heatEndAction, RESET_ROUND_ACTION } from '../actions';\r\nimport * as iassign from 'immutable-assign';\r\n\r\nexport function roundReducer(state: Store.Round, action: Action, heat: Store.Heat, events: Action[]): Store.Round {\r\n\r\n  let result = state;\r\n  \r\n  const checkRoundComplete = () => {\r\n    if (result.dots.every(d => d.collected) && result.pellets.every(p => p.collected)) {\r\n      events.push(heatEndAction(false));\r\n    }\r\n  }\r\n\r\n  switch (action.type) {\r\n    case RESET_ROUND_ACTION:\r\n      return Store.defaultApp().round;\r\n\r\n    case DOT_EATEN_ACTION:\r\n      let dots = result.dots;\r\n      dots[action.index] = iassign(dots[action.index],\r\n        l => {\r\n          l.collected = true;\r\n          return l;\r\n        });\r\n      result = iassign(result, r => { r.dots = [...dots]; return r;});\r\n      checkRoundComplete();\r\n      break;\r\n\r\n    case PELLET_EATEN_ACTION:\r\n      let pellets = result.pellets;\r\n      pellets[action.index] = iassign(pellets[action.index],\r\n        l => {\r\n          l.collected = true;\r\n          return l;\r\n        });\r\n      result = iassign(result, r => { r.pellets = [...pellets]; return r; });\r\n      checkRoundComplete();\r\n      break;\r\n  }\r\n  return result;\r\n}","import { Store } from \"../model\";\r\nimport { Action, RESET_HEAT_ACTION, RESET_ROUND_ACTION } from \"../actions\";\r\nimport * as iassign from 'immutable-assign';\r\n\r\nexport function heatReducer(state: Store.Heat, action: Action, pacman: Store.Pacman, ghosts: Store.Ghost[], events: Action[]): Store.Heat {\r\n\r\n  let result = state;\r\n\r\n  result = iassign(result, (r: Store.Heat) => {\r\n    r.ghosts = ghosts;\r\n    r.pacman = pacman;\r\n    return r;\r\n  });\r\n\r\n  switch(action.type) {\r\n    case RESET_HEAT_ACTION:\r\n    case RESET_ROUND_ACTION:\r\n      return Store.defaultApp().heat;\r\n  } \r\n\r\n  return result;\r\n}\r\n","import { createSelector } from 'reselect';\r\nimport { Store } from '.';\r\nimport { createMazeNavigator } from './MazeNavigator';\r\n\r\n\r\nexport const getMazeNavigator = createSelector(\r\n  (state: Store.App) => state.game.maze,\r\n  (maze) => createMazeNavigator(maze)\r\n);","import { Store } from './index';\r\nimport { Direction, Point } from '../geometry';\r\n\r\nclass Cell {\r\n  ghostsOnly: boolean;\r\n  neighbours = new Map<Direction, Cell>();  \r\n  public constructor(ghostOnly: boolean) {\r\n    this.ghostsOnly = ghostOnly;\r\n  }\r\n}\r\n\r\nexport interface IMazeNavigator {\r\n  hasNeighbour(point: Point, direction: Direction, pacman: boolean): boolean;    \r\n  canEnter(point: Point): boolean;\r\n  canGhostBounceUp(point: Point): boolean;\r\n  isGhostOutOfTheBox(point: Point): boolean;\r\n  directionTowardsGate(point: Point): Direction;\r\n};\r\n\r\nexport const createMazeNavigator = (model: Store.Maze): IMazeNavigator => new MazeNavigator(model);\r\n\r\nexport class MazeNavigator implements IMazeNavigator {\r\n  private static hashFactor = 1000;\r\n  private cells = new Map<number, Cell>();\r\n  private gate: Point;\r\n\r\n  private coordinateToCell(xOrY: number) : number {\r\n    return Math.floor(Math.round(xOrY * 1000) / 1000)\r\n  }\r\n\r\n  private sparseHash(point: Point): number {\r\n    return this.coordinateToCell(point.y) * MazeNavigator.hashFactor + this.coordinateToCell(point.x);\r\n  }\r\n\r\n  constructor(model: Store.Maze) {\r\n    model.passes.forEach(p => this.cells.set(this.sparseHash(p.gridPos), new Cell(p.ghostOnly)));\r\n    this.gate = model.gate;\r\n\r\n    this.cells.forEach((cell, hash, map) => {\r\n        const setNeighbour = (direction: Direction, hashDelta: number) => {\r\n        const neighbour = this.cells.get(hash + hashDelta);\r\n        if (neighbour)\r\n          cell.neighbours.set(direction, neighbour);\r\n        \r\n      }\r\n\r\n      setNeighbour(Direction.Left, -1);\r\n      setNeighbour(Direction.Right, 1);\r\n      setNeighbour(Direction.Up, -MazeNavigator.hashFactor);\r\n      setNeighbour(Direction.Down, MazeNavigator.hashFactor);\r\n    });\r\n  }\r\n\r\n  hasNeighbour(point: Point, direction: Direction, pacman: boolean): boolean {\r\n    const hash = this.sparseHash(point);\r\n    const cell = this.cells.get(hash);\r\n    if (cell != null) {\r\n      const neighbour = cell.neighbours.get(direction);\r\n      return neighbour != null && (!neighbour.ghostsOnly || !pacman);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  canEnter(point: Point): boolean {\r\n    const hash = this.sparseHash(point);\r\n    const cell = this.cells.get(hash);\r\n    return cell != null && !cell.ghostsOnly;\r\n  }\r\n\r\n  canGhostBounceUp(point: Point): boolean {\r\n    return this.coordinateToCell(point.y) > this.gate.y + 1;\r\n  }\r\n\r\n  isGhostOutOfTheBox(point: Point): boolean {\r\n    return this.coordinateToCell(point.y) <= this.gate.y;\r\n  };\r\n\r\n  directionTowardsGate(point: Point): Direction {\r\n    const cellX = this.coordinateToCell(point.x);\r\n    if (cellX <= this.gate.x)\r\n      return Direction.Right;\r\n    else if (cellX > this.gate.x + 1)\r\n      return Direction.Left;\r\n    else\r\n      return Direction.Up;\r\n  }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport { startApplicationSaga } from \"./startRoundSaga\";\r\nimport { START_APPLICATION_ACTION } from \"../actions\";\r\n\r\nexport function* rootSaga() {\r\n  yield [\r\n    takeEvery(START_APPLICATION_ACTION, startApplicationSaga),\r\n  ];\r\n}","import { put, fork, take, call, cancel } from 'redux-saga/effects';\r\nimport { delay, Task } from 'redux-saga';\r\nimport {\r\n  modalTextAction, releasePacmanAction, releaseGhostAction, HEAT_END_ACTION, freezeActorsAction, killPacmanAction, resetHeatAction,\r\n  resetRoundAction, hideActorsAction, showLevelAction, increaseLevelAction, bounceGhostAction, bringGhostOutAction, GHOST_LEFT_BOX_ACTION, Action, PELLET_EATEN_ACTION, startBlueModeAction, endBlueModeAction, BLUE_MODE_TIMEOVER_ACTION } from \"../actions\";\r\n\r\nexport function* startApplicationSaga() {\r\n  yield call(startGameSaga);\r\n}\r\n\r\nexport function* startGameSaga() {\r\n  let roundOutcome = yield call(startRoundSaga);\r\n  while (!roundOutcome.lost) {\r\n    yield put(hideActorsAction());\r\n    yield delay(500);\r\n    yield put(resetRoundAction());\r\n    yield delay(500);\r\n    yield put(showLevelAction());\r\n    yield delay(500);\r\n    roundOutcome = yield call(startRoundSaga);\r\n  }\r\n}\r\n\r\nexport function* startRoundSaga() {\r\n  let heatOutcome = yield call(startHeatSaga);\r\n  while (heatOutcome.lost) {\r\n    yield put(resetHeatAction());\r\n    heatOutcome = yield call(startHeatSaga);\r\n  }\r\n  return { lost: heatOutcome.lost }\r\n}\r\n\r\n\r\nexport function* releaseGhostSaga(index: number, msdelay: number) {\r\n  yield delay(msdelay);\r\n  yield put(releaseGhostAction(index));\r\n}\r\n\r\nexport function* bounceGhostSaga(index: number, msDelay: number) {\r\n  yield put(bounceGhostAction(index));\r\n  yield delay(msDelay);\r\n  yield put(bringGhostOutAction(index));\r\n  yield take((action: Action) => action.type == GHOST_LEFT_BOX_ACTION && action.ghostIndex == index);\r\n  yield put(releaseGhostAction(index));\r\n}\r\n\r\nexport function* blueModeSaga(msDuration: number) {\r\n  yield put(startBlueModeAction());\r\n  yield call(delay, msDuration);\r\n  yield put(endBlueModeAction());\r\n}\r\n\r\nexport function* startHeatSaga() {\r\n  yield put(modalTextAction(\"GET READY!\"));\r\n  yield delay(2000);\r\n  yield put(modalTextAction(undefined));\r\n\r\n  const ghost1: Task = yield fork(releaseGhostSaga, 0, 0);\r\n  const ghost2: Task = yield fork(bounceGhostSaga, 2, 0)\r\n  const ghost3: Task = yield fork(bounceGhostSaga, 1, 2000);\r\n  const ghost4: Task = yield fork(bounceGhostSaga, 3, 3000);\r\n\r\n  yield put(releasePacmanAction());\r\n\r\n  let heatComplete = false;\r\n  let lost: boolean = false;\r\n  let blueMode: Task | undefined;\r\n\r\n\r\n  while (!heatComplete) {\r\n    const result = yield take([HEAT_END_ACTION, PELLET_EATEN_ACTION, BLUE_MODE_TIMEOVER_ACTION]);\r\n    switch (result.type) {\r\n    case HEAT_END_ACTION:\r\n      lost = result.payload;\r\n      heatComplete = true;\r\n      break;\r\n    case PELLET_EATEN_ACTION:\r\n      blueMode = yield fork(blueModeSaga, 5000);\r\n      break;\r\n\r\n    case BLUE_MODE_TIMEOVER_ACTION:\r\n      yield put(endBlueModeAction());\r\n      break;\r\n    }\r\n  }\r\n  if (blueMode != undefined)\r\n    yield cancel(blueMode);\r\n\r\n  yield cancel(ghost1);\r\n  yield cancel(ghost2);\r\n  yield cancel(ghost3);\r\n  yield cancel(ghost4);\r\n\r\n  yield put(freezeActorsAction());\r\n\r\n  if (lost) {\r\n    yield put(killPacmanAction());\r\n    yield delay(1000);\r\n  } else {\r\n    yield put(increaseLevelAction());\r\n  }\r\n  return {\r\n    lost: lost\r\n  }\r\n}"],"sourceRoot":""}